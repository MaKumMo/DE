1) Functions can call functions that also calls the functions.
2) Nested functions are not supported in C++.


# As an aside…

 “foo” is a meaningless word that is often used as a placeholder name for a function or variable when the name is unimportant to the demonstration of some concept. Such words are called metasyntactic variables (though in common language they’re often called “placeholder names” since nobody can remember the term “metasyntactic variable”). Other common metasyntactic variables in C++ include “bar”, “baz”, and 3-letter words that end in “oo”, such as “goo”, “moo”, and “boo”).

3)A value-returning function must return a value of that type (using a return statement), otherwise undefined behavior will result. Use void if your function doesnotreturn any value.

4) Normally functions can only return one value.

5) Normally it's a good idea to comment or document the type of return value your function returns.

6) As a beginner always keep in mind that dont repeat your code. Create a function that does that repeated thing and simply call the function when necessary.

7) Void types of functions cannot return a value. It will genrally create a compile error.

8) A function parameter is a variable used in the header of a function. Function parameters work almost identically to variables defined inside the function, but with one difference: they are initialized with a value provided by the caller of the function.

9) An argument is a value that is passed from the caller to the function when a function call is made.

10) When a function parameter exists but is not used in the body of the function, do not give it a name. You can optionally put a name inside a comment.

11)Groups of statements that appear more than once in a program should generally be made into a function. For example, if we’re reading input from the user multiple times in the same way, that’s a great candidate for a function. If we output something in the same way in multiple places, that’s also a great candidate for a function.

12) A function should generally perform one (and only one) task.

13) It is generally nice idea to keep function parameters in forward function declearation even though it's not a requirement. 

14) All definations are a type of declerations but converse is not true. Declarations that aren’t definitions are called pure declarations. Types of pure declarations include forward declarations for function, variables, and types.
